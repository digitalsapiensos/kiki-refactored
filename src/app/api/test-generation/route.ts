import { NextResponse } from 'next/server'
import { ProjectGenerator, type ProjectData } from '../../../lib/project-generator'

// Test endpoint to verify project generation works
export async function GET() {
  try {
    // Sample project data for testing
    const testProjectData: ProjectData = {
      projectName: "Test KIKI Project",
      description: "A test project generated by KIKI",
      
      // Phase 1
      concept: "Task management for remote teams",
      targetUser: "Remote team leaders",
      coreProblem: "Coordination across time zones",
      mvpFeatures: [
        "Task creation and assignment",
        "Real-time collaboration",
        "Time zone aware scheduling"
      ],
      elevatorPitch: "TaskFlow helps remote teams coordinate across time zones with smart scheduling and real-time collaboration.",
      
      // Phase 2
      competitors: [
        {
          name: "Asana",
          url: "https://asana.com",
          strengths: ["Great UI", "Integrations"],
          weaknesses: ["Complex", "Expensive"],
          keyTakeaway: "Focus on simplicity"
        }
      ],
      githubRepos: [
        {
          name: "awesome-task-management",
          url: "https://github.com/example/task-management",
          stars: 500,
          whyRelevant: "Similar features",
          whatToTake: "UI patterns"
        }
      ],
      recommendedMCPs: [
        {
          name: "Context7",
          purpose: "Documentation lookup",
          useCase: "When implementing features"
        }
      ],
      
      // Phase 3
      techStack: {
        frontend: {
          framework: "Next.js 14",
          ui: "shadcn/ui",
          styling: "Tailwind CSS",
          reason: "Modern and fast"
        },
        backend: {
          service: "Supabase",
          database: "PostgreSQL",
          auth: "Supabase Auth",
          reason: "All-in-one solution"
        },
        deployment: {
          frontend: "Vercel",
          reason: "Best for Next.js"
        }
      },
      databaseSchema: {
        tables: [
          {
            name: "tasks",
            columns: [
              { name: "id", type: "uuid", constraints: "primary key" },
              { name: "title", type: "text", constraints: "not null" },
              { name: "user_id", type: "uuid", constraints: "references users(id)" }
            ],
            relationships: ["tasks.user_id -> users.id"]
          }
        ]
      },
      envVariables: [
        {
          name: "NEXT_PUBLIC_SUPABASE_URL",
          description: "Supabase project URL",
          example: "https://xxx.supabase.co"
        }
      ]
    }

    // Generate the project
    const generator = new ProjectGenerator(testProjectData)
    const blob = await generator.generateProjectZip()
    
    return NextResponse.json({
      success: true,
      message: "Project generation works! The full generation would create a ZIP file.",
      sampleFiles: [
        "CLAUDE.md",
        "PRD.md",
        "MASTER_PLAN.md",
        "DATABASE.md",
        "README.md",
        ".env.example",
        "package.json"
      ]
    })
  } catch (error) {
    console.error('Test generation error:', error)
    return NextResponse.json(
      { error: 'Failed to test generation', details: error },
      { status: 500 }
    )
  }
}